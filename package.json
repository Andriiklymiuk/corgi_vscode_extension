{
  "name": "corgi",
  "displayName": "corgi",
  "publisher": "Corgi",
  "description": "Spell checker for corgi-compose.yml files and corgi runner from vscode",
  "version": "0.4.8",
  "license": "MIT",
  "repository": "https://github.com/Andriiklymiuk/corgi_vscode_extension",
  "icon": "resources/icon.png",
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:yml",
    "onLanguage:yaml",
    "workspaceContains:corgi-compose*.yml",
    "workspaceContains:corgi-compose*.yaml",
    "workspaceContains:corgi-*.yml",
    "workspaceContains:corgi-*.yaml",
    "workspaceContains:corgi-examples.json"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsWelcome": [
      {
        "view": "corgiTreeView",
        "contents": "Corgi cli is not installed.\nInstall corgi to get started. It relies on [Homebrew](https://brew.sh), so make sure it is installed too.\n[$(cloud-download)Install Corgi](command:corgi.installWithHomebrew)\nYou can also check corgi cli repo for more info.\n[$(github-alt)Corgi repo](https://github.com/Andriiklymiuk/corgi)\n",
        "when": "corgiNotInstalled"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+c",
        "command": "corgi.stop",
        "when": "terminalFocus"
      }
    ],
    "commands": [
      {
        "command": "corgi.run",
        "title": "Corgi run",
        "icon": "$(debug-start)"
      },
      {
        "command": "corgi.init",
        "title": "Corgi init (do cloning, if needed, folder creations, etc)"
      },
      {
        "command": "corgi.pull",
        "title": "Corgi pull (pull changes from all repos)"
      },
      {
        "command": "corgi.docs",
        "title": "Show corgi docs"
      },
      {
        "command": "corgi.help",
        "title": "Show corgi help"
      },
      {
        "command": "corgi.stop",
        "title": "Corgi stop",
        "icon": "$(debug-stop)"
      },
      {
        "command": "corgi.create",
        "title": "Corgi create"
      },
      {
        "command": "corgi.doctor",
        "title": "Doctor corgi, check for required (if all programs installed, etc)"
      },
      {
        "command": "corgi.doctorFromRoot",
        "title": "Doctor corgi, check for required from Workspace Root"
      },
      {
        "command": "corgi.runFromRoot",
        "title": "Corgi run from root",
        "icon": "$(debug-start)"
      },
      {
        "command": "corgi.reload",
        "title": "Reload extension",
        "icon": "$(refresh)"
      },
      {
        "command": "corgi.createFromRoot",
        "title": "Corgi create from root"
      },
      {
        "command": "corgi.pullFromRoot",
        "title": "Corgi pull from Workspace Root"
      },
      {
        "command": "corgi.initFromRoot",
        "title": "Corgi init from Workspace Root"
      },
      {
        "command": "corgi.db",
        "title": "Corgi db"
      },
      {
        "command": "corgi.dbFromRoot",
        "title": "Corgi db from Workspace Root"
      },
      {
        "command": "corgi.dbUp",
        "title": "Corgi up all databases"
      },
      {
        "command": "corgi.dbUpFromRoot",
        "title": "Corgi up all databases from Workspace Root"
      },
      {
        "command": "corgi.dbDown",
        "title": "Corgi down all databases"
      },
      {
        "command": "corgi.dbDownFromRoot",
        "title": "Corgi down all databases from Workspace Root"
      },
      {
        "command": "corgi.dStop",
        "title": "Corgi stop all databases"
      },
      {
        "command": "corgi.dbStopFromRoot",
        "title": "Corgi stop all databases from Workspace Root"
      },
      {
        "command": "corgi.dbSeed",
        "title": "Corgi seed all databases"
      },
      {
        "command": "corgi.dbSeedFromRoot",
        "title": "Corgi seed all databases from Workspace Root"
      },
      {
        "command": "corgi.installWithHomebrew",
        "title": "Corgi install with Homebrew"
      },
      {
        "command": "corgi.downloadExample",
        "title": "Download"
      },
      {
        "command": "corgi.runExample",
        "title": "Download and run"
      },
      {
        "command": "corgi.openLink",
        "title": "Open example link"
      },
      {
        "command": "corgi.clean",
        "title": "Clean"
      },
      {
        "command": "corgi.cleanFromRoot",
        "title": "Clean"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "corgi",
          "title": "Corgi",
          "icon": "resources/activityBarIcon.png"
        }
      ]
    },
    "views": {
      "corgi": [
        {
          "id": "corgiTreeView",
          "name": "Woof"
        }
      ]
    },
    "menus": {
      "editor/title": [
        {
          "command": "corgi.run",
          "group": "navigation",
          "when": "resourceFilename =~ /corgi-*.*\\.y(a)?ml/"
        },
        {
          "command": "corgi.stop",
          "group": "navigation",
          "when": "resourceFilename =~ /corgi-*.*\\.y(a)?ml/"
        }
      ],
      "view/title": [
        {
          "command": "corgi.runFromRoot",
          "when": "view == corgiTreeView",
          "group": "navigation"
        },
        {
          "command": "corgi.stop",
          "when": "view == corgiTreeView",
          "group": "navigation"
        },
        {
          "command": "corgi.reload",
          "when": "view == corgiTreeView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "corgi.runExample",
          "when": "view == corgiTreeView && viewItem == example"
        },
        {
          "command": "corgi.downloadExample",
          "when": "view == corgiTreeView && viewItem == example"
        },
        {
          "command": "corgi.openLink",
          "when": "view == corgiTreeView && viewItem == example"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "pnpm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "build:vsce": "vsce package --no-dependencies",
    "publish:vsce": "vsce publish --no-dependencies"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "20.2.5",
    "@types/vscode": "^1.81.0",
    "@typescript-eslint/eslint-plugin": "^5.59.8",
    "@typescript-eslint/parser": "^5.59.8",
    "@vscode/test-electron": "^2.3.2",
    "copy-webpack-plugin": "11.0.0",
    "eslint": "^8.41.0",
    "glob": "^8.1.0",
    "mocha": "^10.2.0",
    "ts-loader": "^9.4.3",
    "typescript": "^5.1.3",
    "webpack": "^5.85.0",
    "webpack-cli": "^5.1.1"
  },
  "dependencies": {
    "ajv": "8.12.0",
    "yaml": "2.3.1"
  }
}