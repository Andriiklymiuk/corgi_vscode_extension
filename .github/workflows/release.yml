name: Package and Publish VS Code Extension

on:
  push:
    branches:
      - "main"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Install vsce
        run: npm install -g vsce

      - name: Check current version vs marketplace version
        id: check-version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          MARKETPLACE_VERSION=$(vsce show Corgi.corgi --json | grep -m1 '"version":' | awk -F'"' '{print $4}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          if [ "$CURRENT_VERSION" == "$MARKETPLACE_VERSION" ]; then
            echo "Version $CURRENT_VERSION is already published"
            echo "VERSION_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Version $CURRENT_VERSION is not yet published"
            echo "VERSION_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Extract version and Create Tag
        if: env.VERSION_EXISTS == 'false'
        id: create-tag
        run: |
          TAG="v${CURRENT_VERSION}"

          echo "VERSION: ${CURRENT_VERSION}"
          echo "TAG: $TAG"

          # Check if the tag exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${GITHUB_TOKEN}" https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/$TAG)

          if [ "$HTTP_STATUS" -ne 200 ]
          then
            echo "Tag does not exist, creating new tag"
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            git tag $TAG
            git push origin $TAG
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Tag already exists"
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}

      - run: git fetch --force --tags

      - name: Generate Changelog with Commit Links
        id: generate_changelog
        run: |
          git fetch --tags
          LATEST_COMMIT=$(git rev-list --tags --max-count=1 2>/dev/null || echo "")
          if [ -z "$LATEST_COMMIT" ]; then
            echo "No tags found, generating changelog from latest commits."
            COMMIT_LOG=$(git log --oneline --no-merges -n 20 --pretty=format:"- [%h](https://github.com/$GITHUB_REPO/commit/%H) %s")
          else
            LATEST_TAG=$(git describe --tags $LATEST_COMMIT 2>/dev/null || echo "")
            if [ -z "$LATEST_TAG" ]; then
              echo "No names found, cannot describe anything."
              COMMIT_LOG=$(git log --oneline --no-merges -n 20 --pretty=format:"- [%h](https://github.com/$GITHUB_REPO/commit/%H) %s")
            else
              echo "Latest tag found: $LATEST_TAG"
              PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
              if [ -z "$PREVIOUS_TAG" ]; then
                echo "No previous tags found"
                COMMIT_LOG=$(git log --oneline --no-merges -n 20 --pretty=format:"- [%h](https://github.com/$GITHUB_REPO/commit/%H) %s")
              else
                echo "Previous tag found: $PREVIOUS_TAG"
                COMMIT_LOG=$(git log --oneline --no-merges $PREVIOUS_TAG..$LATEST_TAG --pretty=format:"- [%h](https://github.com/$GITHUB_REPO/commit/%H) %s")
              fi
            fi
          fi
          echo "$COMMIT_LOG"
          echo "$COMMIT_LOG" > CHANGELOG.md
        env:
          GITHUB_REPO: ${{ github.repository }}

      - name: Package Extension
        if: env.VERSION_EXISTS == 'false'
        run: pnpm build:vsce

      - name: Publish to Visual Studio Marketplace
        if: env.VERSION_EXISTS == 'false'
        run: make publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Create GitHub Release
        if: env.VERSION_EXISTS == 'false'
        id: create_release
        run: |
          changelog=$(cat CHANGELOG.md)
          changelog=$(echo "$changelog" | jq -Rs .)
          response=$(curl \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            --header "Content-Type: application/json" \
            --request POST \
            --data '{
              "tag_name": "v'${{ env.CURRENT_VERSION }}'",
              "name": "v'${{ env.CURRENT_VERSION }}'",
              "body": '"$changelog"',
              "draft": false,
              "prerelease": false
            }' \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          upload_url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=upload_url::$upload_url"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload Release Asset
        if: env.VERSION_EXISTS == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./corgi-${{ env.CURRENT_VERSION }}.vsix
          asset_name: corgi-${{ env.CURRENT_VERSION }}.vsix
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
